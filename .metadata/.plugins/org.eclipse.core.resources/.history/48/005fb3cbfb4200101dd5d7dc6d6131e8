package com.mayank.ecommerce.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mayank.ecommerce.entity.Cart;
import com.mayank.ecommerce.entity.Product;
import com.mayank.ecommerce.entity.User;
import com.mayank.ecommerce.entity.dto.CartDTO;
import com.mayank.ecommerce.repository.CartRepository;
import com.mayank.ecommerce.repository.ProductRepository;
import com.mayank.ecommerce.repository.UserRepository;

@Service
public class CartService {
	
	@Autowired
    private UserRepository userRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CartRepository cartRepository;

	/*
	 * public void addToCart(String email, CartDTO cartDTO) { User user =
	 * userRepository.findByEmail(email) .orElseThrow(() -> new
	 * RuntimeException("User not found")); Product product =
	 * productRepository.findById(cartDTO.getProductId()) .orElseThrow(() -> new
	 * RuntimeException("Product not found"));
	 * 
	 * Cart cart = cartRepository.findByUserAndProduct(user, product) .orElse(new
	 * Cart());
	 * 
	 * cart.setUser(user); cart.setProduct(product);
	 * cart.setQuantity(cart.getQuantity() + cartDTO.getQuantity());
	 * 
	 * cartRepository.save(cart);
	 * 
	 * }
	 */
    
    public void addToCart(String email, CartDTO cartDTO) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));

        Product product = productRepository.findById(cartDTO.getProductId())
                .orElseThrow(() -> new RuntimeException("Product not found"));

        // üîç Check stock availability
        if (product.getQuantity() < cartDTO.getQuantity()) {
            throw new RuntimeException("Only " + product.getQuantity() + " items left in stock.");
        }

        // Check if product already exists in cart
        Cart existingCart = cartRepository.findByUserAndProduct(user, product).orElse(null);
        if (existingCart != null) {
            int newQuantity = existingCart.getQuantity() + cartDTO.getQuantity();

            //  Cart limit check
            if (newQuantity > 5) {
                throw new RuntimeException("You cannot add more than 5 units of this product to cart.");
            }

            existingCart.setQuantity(newQuantity);
            cartRepository.save(existingCart);
        } else {
            if (cartDTO.getQuantity() > 5) {
                throw new RuntimeException("You cannot add more than 5 units of this product to cart.");
            }

            Cart newCart = new Cart();
            newCart.setUser(user);
            newCart.setProduct(product);
            newCart.setQuantity(cartDTO.getQuantity());

            cartRepository.save(newCart);
        }
    }


	public List<Cart> getCart(String email) {
		 User user = userRepository.findByEmail(email)
	                .orElseThrow(() -> new RuntimeException("User not found"));
	        return cartRepository.findByUser(user);
	}
	
	 public void removeFromCart(String email, Long productId) {
	        User user = userRepository.findByEmail(email)
	                .orElseThrow(() -> new RuntimeException("User not found"));
	        Product product = productRepository.findById(productId)
	                .orElseThrow(() -> new RuntimeException("Product not found"));

	        Cart cart = cartRepository.findByUserAndProduct(user, product)
	                .orElseThrow(() -> new RuntimeException("Item not in cart"));
	        cartRepository.delete(cart);
	    }

	    public void clearCart(String email) {
	        User user = userRepository.findByEmail(email)
	                .orElseThrow(() -> new RuntimeException("User not found"));
	        List<Cart> carts = cartRepository.findByUser(user);
	        cartRepository.deleteAll(carts);
	    }

}
