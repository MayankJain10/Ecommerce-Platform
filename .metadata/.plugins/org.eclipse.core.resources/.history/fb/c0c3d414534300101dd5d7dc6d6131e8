package com.mayank.ecommerce.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;
import java.util.NoSuchElementException;

import com.mayank.ecommerce.entity.Product;
import com.mayank.ecommerce.entity.dto.ProductDTO;
import com.mayank.ecommerce.service.ProductService;

@RestController
@RequestMapping("/api/products")
public class ProductController {
		
	@Autowired
	private ProductService productService;
	
	/*
	 * /api/products/create
	 * API is used to create the products for the ecommerce platform. 
	 * 
	 * return product object
	 */
	@PostMapping("/create")
	@PreAuthorize("hasRole('ADMIN')")
	public Product create(@RequestBody ProductDTO productDTO) {
		
		return productService.createProduct(productDTO);
	}
	
	/*
	 *  /api/products/allProducts
	 *  api is used to fetch all the list of products.
	 *  
	 *  return: List of products
	 */
	
	@GetMapping("/allproducts")
	public List<Product> getAll(){
		return productService.getAllProducts();
	}
	
	@GetMapping("/allProducts/{id}")
	public Product getProductById(@PathVariable Long id) {
		return productService.getProductById(id)
				.orElseThrow(() -> new NoSuchElementException("Product not found with given id: " + id));
	}
	
	
	@PutMapping("/update/product/{id}")
	@PreAuthorize("hasRole('ADMIN')")
	public Product updateProductById(@PathVariable Long id, @RequestBody ProductDTO productDTO) {
		return productService.updateProductById(id, productDTO);
	}
	
	@DeleteMapping("/delete/product/{id}")
	@PreAuthorize("hasRole('ADMIN')")
	public void deleteProductById(Long id) {
		productService.deleteProductById(id);
	}
	
	/*
	 * /api/products/search 
	 * API is used to search the products from the ecommerce platform.
	 * 
	 * return product object.
	 */
	
	@GetMapping("/search")
	public ResponseEntity<List<Product>>searchProducts(@RequestParam String keyword){
		List<Product> results = productService.searchProduct(keyword);
		return ResponseEntity.ok(results);
	}
	
	/*
	 * /api/products/sorted?sortBy=price&direction=asc 
	 * API is used to sort the products on the basis of price and in ascending order
	 * from the ecommerce platform.
	 * 
	 * valid values 
	 * sortBy: price, name
	 * direction: asc, desc
	 * 
	 * return product object.
	 */
	
	@GetMapping("/sorted")
	public ResponseEntity<List<Product>> getSortedProducts(
	        @RequestParam(defaultValue = "price") String sortBy,
	        @RequestParam(defaultValue = "asc") String direction) {

	    List<Product> products = productService.getSortedProducts(sortBy, direction);
	    return ResponseEntity.ok(products);
	}

	

}
