package com.mayank.ecommerce.service;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.mayank.ecommerce.entity.User;
import com.mayank.ecommerce.entity.dto.UserDTO;
import com.mayank.ecommerce.repository.UserRepository;

@ExtendWith(MockitoExtension.class)
public class AuthServiceTests {

    @InjectMocks
    private AuthService authService;

    @Mock
    private UserRepository userRepository;

    @Test
    public void testRegisterUserSuccess() {
        UserDTO dto = new UserDTO();
        dto.setEmail("test@example.com");
        dto.setPassword("pass123");
        dto.setName("Test");
        dto.setRole("CUSTOMER");

        authService.registerUser(dto);

        verify(userRepository, times(1)).save(any(User.class));
    }

    @Test
    public void testLoginUserInvalidPassword() {
        User user = new User();
        user.setEmail("test@example.com");
        user.setPassword(new BCryptPasswordEncoder().encode("correct"));

        when(userRepository.findByEmail("test@example.com")).thenReturn(Optional.of(user));

        UserDTO dto = new UserDTO();
        dto.setEmail("test@example.com");
        dto.setPassword("wrong");

        assertThrows(BadCredentialsException.class, () -> authService.loginUser(dto));
    }
}

