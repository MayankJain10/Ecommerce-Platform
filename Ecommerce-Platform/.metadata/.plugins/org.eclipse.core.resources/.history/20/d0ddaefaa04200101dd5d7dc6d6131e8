package com.mayank.ecommerce.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mayank.ecommerce.entity.Order;
import com.mayank.ecommerce.entity.OrderItem;
import com.mayank.ecommerce.entity.Product;
import com.mayank.ecommerce.entity.User;
import com.mayank.ecommerce.entity.dto.OrderItemDTO;
import com.mayank.ecommerce.entity.dto.OrderRequestDTO;
import com.mayank.ecommerce.repository.OrderRepository;
import com.mayank.ecommerce.repository.ProductRepository;
import com.mayank.ecommerce.repository.UserRepository;

@Service
public class OrderService {
	
	@Autowired
    private ProductRepository productRepository;

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private UserRepository userRepository;
    

    public Order placeOrder(OrderRequestDTO request, String userEmail) {
        User user = userRepository.findByEmail(userEmail)
        		.orElseThrow(() -> new RuntimeException("User not found"));

        Order order = new Order();
        order.setUser(user);
        order.setOrderDate(LocalDateTime.now());

        List<OrderItem> orderItems = new ArrayList<>();
        double total = 0;

        for (OrderItemDTO dto : request.getItems()) {
            Product product = productRepository.findById(dto.getProductId()).orElseThrow();

            OrderItem item = new OrderItem();
            item.setProduct(product);
            item.setQuantity(dto.getQuantity());
            item.setPrice(product.getPrice() * dto.getQuantity());
            item.setOrder(order);

            total += item.getPrice();
            orderItems.add(item);
        }

        order.setTotalAmount(total);
        order.setItems(orderItems);

        return orderRepository.save(order);
    }

    public List<Order> getUserOrders(String email) {
        User user = userRepository.findByEmail(email).orElseThrow();
        return orderRepository.findByUser(user);
    }

}
